1. **定义状态**：$dp[i][w]$ 表示前 $i$ 个物品在容量 $w$ 下的最大价值。
2. **递推公式**：
   $dp[i][w] = \max(dp[i-1][w], dp[i-1][w-w_i] + v_i)$。
3. **代码实现**：
```python
def knapsack(weights, values, capacity):
    n = len(weights)
    dp = [[0]*(capacity+1) for _ in range(n+1)]
    for i in range(1, n+1):
        for w in range(1, capacity+1):
            if weights[i-1] <= w:
                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])
    return dp[n][capacity]
```
