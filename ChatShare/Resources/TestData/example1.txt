

在 iOS 平台上渲染类似于 ChatGPT 生成的文本（包含数学公式），可以采用以下方法实现：

---

### **1. 原生方案：`NSAttributedString` + 数学公式图片**
**适用场景**：需要原生高性能渲染，数学公式为静态内容
```swift
// 使用 iOSMath 库（推荐）
pod 'iosMath' // CocoaPods 集成

// 代码示例
import iosMath

let label = MTMathUILabel()
label.latex = "x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}"
label.sizeToFit()

// 将公式转换为图片并插入富文本
let formulaImage = UIGraphicsImageRenderer(bounds: label.bounds).image { _ in
    label.layer.render(in: UIGraphicsGetCurrentContext()!)
}

let attributedString = NSMutableAttributedString()
attributedString.append(NSAttributedString(string: "解方程："))
attributedString.append(NSAttributedString(attachment: NSTextAttachment(image: formulaImage)))
textView.attributedText = attributedString
```

---

### **2. WebView 混合方案**
**适用场景**：需要动态更新或复杂公式排版
```swift
let htmlContent = """
<html>
  <head>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
  </head>
  <body>
    <p>牛顿第二定律：\( F = ma \)</p>
    <p>二次方程解：\( x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} \)</p>
  </body>
</html>
"""

webView.loadHTMLString(htmlContent, baseURL: nil)
```

---

### **3. SwiftUI 高级方案**
**适用场景**：SwiftUI 项目，需要现代声明式语法
```swift
import SwiftUI
import iosMath

struct MathTextView: UIViewRepresentable {
    let latex: String
    
    func makeUIView(context: Context) -> MTMathUILabel {
        let label = MTMathUILabel()
        label.latex = latex
        return label
    }
    
    func updateUIView(_ uiView: MTMathUILabel, context: Context) {}
}

// 使用示例
VStack {
    Text("质能方程：")
    MathTextView(latex: "E = mc^2")
}
```

---

### **4. 混合渲染技巧**
**组合文本与公式**：
```swift
let normalText = "积分公式演示："
let formulaText = "\\int_{a}^{b} f(x)dx"

let combinedText = NSMutableAttributedString(string: normalText)
let mathLabel = MTMathUILabel()
mathLabel.latex = formulaText
mathLabel.sizeToFit()

// 转换为图片附件
let attachment = NSTextAttachment()
attachment.image = mathLabel.toImage()
combinedText.append(NSAttributedString(attachment: attachment))

textView.attributedText = combinedText
```

---

### **性能优化建议**
1. **缓存机制**：对渲染后的公式图片进行缓存（`NSCache`）
2. **异步渲染**：在后台线程生成数学公式图片
```swift
DispatchQueue.global(qos: .userInitiated).async {
    let renderedImage = renderLatexToImage(formula)
    DispatchQueue.main.async {
        updateUI(with: renderedImage)
    }
}
```
3. **按需渲染**：只在视图可见时加载复杂公式

---

### **技术选型对比**
| 方案               | 优点                          | 缺点                     |
|--------------------|-------------------------------|--------------------------|
| iOSMath 原生渲染    | 高性能、完美集成 UIKit        | 需要学习新 API          |
| WebView + MathJax  | 跨平台一致性、复杂公式支持好   | 内存消耗较大、滚动卡顿   |
| SwiftUI 自定义视图 | 声明式语法、现代化开发体验     | 对旧系统支持有限        |

根据项目需求选择：优先推荐 iOSMath 方案获得最佳性能，需要复杂科学排版时使用 WebView 方案。
